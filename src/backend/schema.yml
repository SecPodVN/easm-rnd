openapi: 3.0.3
info:
  title: EASM API
  version: 1.0.0
  description: EASM Django REST API
paths:
  /api/:
    get:
      operationId: api_retrieve
      description: Provides information about available API endpoints.
      summary: API Root
      tags:
      - API Info
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  version:
                    type: string
                  endpoints:
                    type: object
          description: ''
  /api/scanner/findings/:
    get:
      operationId: api_scanner_findings_list
      description: Returns all findings from the findings collection. Each finding
        represents a detected issue from resource scanning.
      summary: List all findings
      tags:
      - Scanner
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Finding'
          description: Findings retrieved successfully
  /api/scanner/findings/by_region/:
    get:
      operationId: api_scanner_findings_by_region_retrieve
      description: Joins findings with resources to get region information and aggregates
        findings by region.
      summary: Get issues by region
      tags:
      - Scanner
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RegionIssue'
          description: Region issues retrieved successfully
  /api/scanner/findings/by_resource_type/:
    get:
      operationId: api_scanner_findings_by_resource_type_retrieve
      description: Aggregates findings by resource type.
      summary: Get issues by resource type
      tags:
      - Scanner
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResourceTypeIssue'
          description: Resource type issues retrieved successfully
  /api/scanner/findings/severity_status/:
    get:
      operationId: api_scanner_findings_severity_status_retrieve
      description: Aggregates findings by severity level (CRITICAL, HIGH, MEDIUM,
        LOW, INFO).
      summary: Get severity status summary
      tags:
      - Scanner
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SeverityStatus'
          description: Severity summary retrieved successfully
  /api/scanner/healthStatus:
    get:
      operationId: api_scanner_healthStatus_retrieve
      description: Returns health status of the scanner service.
      summary: Scanner health check
      tags:
      - Scanner
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: Scanner service is healthy
  /api/scanner/resources/delete/:
    post:
      operationId: api_scanner_resources_delete_create
      description: Deletes resources matching the specified MongoDB filter.
      summary: Delete resources by filter
      tags:
      - Scanner
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/DeleteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DeleteRequest'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: Resources deleted successfully
        '400':
          description: Invalid request data
  /api/scanner/resources/list/:
    post:
      operationId: api_scanner_resources_list_create
      description: Returns a paginated list of resources matching the filter, with
        search and sort capabilities.
      summary: List resources with filtering and pagination
      tags:
      - Scanner
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceListRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResourceListRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResourceListRequest'
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: Resources retrieved successfully
        '400':
          description: Invalid request data
  /api/scanner/resources/upload/:
    post:
      operationId: api_scanner_resources_upload_create
      description: Bulk inserts an array of resource objects into the MongoDB resources
        collection.
      summary: Upload resources in bulk
      tags:
      - Scanner
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceUploadRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResourceUploadRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResourceUploadRequest'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          description: Resources uploaded successfully
        '400':
          description: Invalid request data
  /api/scanner/rules/delete/:
    post:
      operationId: api_scanner_rules_delete_create
      description: Deletes rules matching the specified MongoDB filter.
      summary: Delete rules by filter
      tags:
      - Scanner
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/DeleteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DeleteRequest'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: Rules deleted successfully
        '400':
          description: Invalid request data
  /api/scanner/rules/upload/:
    post:
      operationId: api_scanner_rules_upload_create
      description: Bulk inserts an array of rule objects into the MongoDB rules collection.
      summary: Upload rules in bulk
      tags:
      - Scanner
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RuleUploadRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RuleUploadRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RuleUploadRequest'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          description: Rules uploaded successfully
        '400':
          description: Invalid request data
  /api/scanner/scan/:
    get:
      operationId: api_scanner_scan_list
      description: Fetches all resources and rules, evaluates each resource against
        all rules using the logic engine, and creates findings for any matches.
      summary: Scan all resources against rules
      tags:
      - Scanner
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: Scan completed successfully
  /api/todos/:
    get:
      operationId: api_todos_list
      description: |-
        ViewSet for Todo CRUD operations

        Provides:
        - list: GET /api/todos/
        - create: POST /api/todos/
        - retrieve: GET /api/todos/{id}/
        - update: PUT /api/todos/{id}/
        - partial_update: PATCH /api/todos/{id}/
        - destroy: DELETE /api/todos/{id}/
        - complete: POST /api/todos/{id}/complete/
        - my_todos: GET /api/todos/my_todos/
        - statistics: GET /api/todos/statistics/
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: priority
        schema:
          type: string
          enum:
          - high
          - low
          - medium
        description: |-
          * `low` - Low
          * `medium` - Medium
          * `high` - High
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: string
          enum:
          - completed
          - in_progress
          - pending
        description: |-
          * `pending` - Pending
          * `in_progress` - In Progress
          * `completed` - Completed
      tags:
      - Todos
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTodoList'
          description: ''
    post:
      operationId: api_todos_create
      description: |-
        ViewSet for Todo CRUD operations

        Provides:
        - list: GET /api/todos/
        - create: POST /api/todos/
        - retrieve: GET /api/todos/{id}/
        - update: PUT /api/todos/{id}/
        - partial_update: PATCH /api/todos/{id}/
        - destroy: DELETE /api/todos/{id}/
        - complete: POST /api/todos/{id}/complete/
        - my_todos: GET /api/todos/my_todos/
        - statistics: GET /api/todos/statistics/
      tags:
      - Todos
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoCreateUpdateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TodoCreateUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TodoCreateUpdateRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoCreateUpdate'
          description: ''
  /api/todos/{id}/:
    get:
      operationId: api_todos_retrieve
      description: |-
        ViewSet for Todo CRUD operations

        Provides:
        - list: GET /api/todos/
        - create: POST /api/todos/
        - retrieve: GET /api/todos/{id}/
        - update: PUT /api/todos/{id}/
        - partial_update: PATCH /api/todos/{id}/
        - destroy: DELETE /api/todos/{id}/
        - complete: POST /api/todos/{id}/complete/
        - my_todos: GET /api/todos/my_todos/
        - statistics: GET /api/todos/statistics/
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Todo.
        required: true
      tags:
      - Todos
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
          description: ''
    put:
      operationId: api_todos_update
      description: |-
        ViewSet for Todo CRUD operations

        Provides:
        - list: GET /api/todos/
        - create: POST /api/todos/
        - retrieve: GET /api/todos/{id}/
        - update: PUT /api/todos/{id}/
        - partial_update: PATCH /api/todos/{id}/
        - destroy: DELETE /api/todos/{id}/
        - complete: POST /api/todos/{id}/complete/
        - my_todos: GET /api/todos/my_todos/
        - statistics: GET /api/todos/statistics/
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Todo.
        required: true
      tags:
      - Todos
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoCreateUpdateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TodoCreateUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TodoCreateUpdateRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoCreateUpdate'
          description: ''
    patch:
      operationId: api_todos_partial_update
      description: |-
        ViewSet for Todo CRUD operations

        Provides:
        - list: GET /api/todos/
        - create: POST /api/todos/
        - retrieve: GET /api/todos/{id}/
        - update: PUT /api/todos/{id}/
        - partial_update: PATCH /api/todos/{id}/
        - destroy: DELETE /api/todos/{id}/
        - complete: POST /api/todos/{id}/complete/
        - my_todos: GET /api/todos/my_todos/
        - statistics: GET /api/todos/statistics/
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Todo.
        required: true
      tags:
      - Todos
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTodoCreateUpdateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTodoCreateUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTodoCreateUpdateRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoCreateUpdate'
          description: ''
    delete:
      operationId: api_todos_destroy
      description: |-
        ViewSet for Todo CRUD operations

        Provides:
        - list: GET /api/todos/
        - create: POST /api/todos/
        - retrieve: GET /api/todos/{id}/
        - update: PUT /api/todos/{id}/
        - partial_update: PATCH /api/todos/{id}/
        - destroy: DELETE /api/todos/{id}/
        - complete: POST /api/todos/{id}/complete/
        - my_todos: GET /api/todos/my_todos/
        - statistics: GET /api/todos/statistics/
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Todo.
        required: true
      tags:
      - Todos
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/todos/{id}/complete/:
    post:
      operationId: api_todos_complete_create
      description: Mark a specific todo as completed and set completion timestamp.
      summary: Mark todo as completed
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Todo.
        required: true
      tags:
      - Todos
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TodoRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TodoRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
          description: ''
  /api/todos/my_todos/:
    get:
      operationId: api_todos_my_todos_list
      description: Get all todos for the authenticated user with filtering and pagination.
      summary: Get my todos
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: priority
        schema:
          type: string
          enum:
          - high
          - low
          - medium
        description: |-
          * `low` - Low
          * `medium` - Medium
          * `high` - High
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: string
          enum:
          - completed
          - in_progress
          - pending
        description: |-
          * `pending` - Pending
          * `in_progress` - In Progress
          * `completed` - Completed
      tags:
      - Todos
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTodoList'
          description: ''
  /api/todos/statistics/:
    get:
      operationId: api_todos_statistics_retrieve
      description: Get statistics about the user's todos including completion rates.
      summary: Get todo statistics
      tags:
      - Todos
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  pending:
                    type: integer
                  in_progress:
                    type: integer
                  completed:
                    type: integer
                  completion_rate:
                    type: number
                    format: float
          description: ''
  /api/token/:
    post:
      operationId: api_token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/token/refresh/:
    post:
      operationId: api_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/token/register/:
    post:
      operationId: api_token_register_create
      description: Create a new user account with username, password, and optional
        profile information.
      summary: Register a new user
      tags:
      - Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequest'
            examples:
              RegistrationExample:
                value:
                  username: newuser
                  email: newuser@example.com
                  password: securepassword123
                  password_confirm: securepassword123
                  first_name: John
                  last_name: Doe
                summary: Registration Example
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequest'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User registered successfully
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                      username:
                        type: string
                      email:
                        type: string
                      first_name:
                        type: string
                      last_name:
                        type: string
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: array
                    items:
                      type: string
                  password:
                    type: array
                    items:
                      type: string
                  email:
                    type: array
                    items:
                      type: string
          description: ''
components:
  schemas:
    DeleteRequest:
      type: object
      description: Serializer for delete operations.
      properties:
        filter:
          type: object
          additionalProperties: {}
      required:
      - filter
    Finding:
      type: object
      description: Serializer for Finding documents.
      properties:
        _id:
          type: string
          readOnly: true
          title: ' id'
        resource_id:
          type: string
        resource_name:
          type: string
        resource_type:
          type: string
        rule_name:
          type: string
        rule_description:
          type: string
        severity:
          type: string
        field:
          type: string
        actual_value:
          type: string
        expected_value:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - _id
      - actual_value
      - created_at
      - expected_value
      - field
      - resource_id
      - resource_name
      - resource_type
      - rule_name
      - severity
    PaginatedTodoList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Todo'
    PatchedTodoCreateUpdateRequest:
      type: object
      description: Todo serializer for create and update operations
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/StatusEnum'
        priority:
          $ref: '#/components/schemas/PriorityEnum'
        due_date:
          type: string
          format: date-time
          nullable: true
    PriorityEnum:
      enum:
      - low
      - medium
      - high
      type: string
      description: |-
        * `low` - Low
        * `medium` - Medium
        * `high` - High
    RegionIssue:
      type: object
      description: Serializer for issues by region.
      properties:
        region:
          type: string
        count:
          type: integer
      required:
      - count
      - region
    ResourceListRequest:
      type: object
      description: Serializer for resource list request.
      properties:
        filter:
          type: object
          additionalProperties: {}
        page_number:
          type: integer
          minimum: 1
          default: 1
        page_size:
          type: integer
          maximum: 100
          minimum: 1
          default: 10
        sort_by:
          type: string
          minLength: 1
          default: name
        sort_order:
          allOf:
          - $ref: '#/components/schemas/SortOrderEnum'
          default: asc
        search_str:
          type: string
    ResourceTypeIssue:
      type: object
      description: Serializer for issues by resource type.
      properties:
        resource_type:
          type: string
        count:
          type: integer
      required:
      - count
      - resource_type
    ResourceUploadRequest:
      type: object
      description: Serializer for bulk resource upload.
      properties:
        resources:
          type: array
          items:
            type: object
            additionalProperties: {}
      required:
      - resources
    RuleUploadRequest:
      type: object
      description: Serializer for bulk rule upload.
      properties:
        rules:
          type: array
          items:
            type: object
            additionalProperties: {}
      required:
      - rules
    SeverityStatus:
      type: object
      description: Serializer for severity status response.
      properties:
        CRITICAL:
          type: integer
        HIGH:
          type: integer
        MEDIUM:
          type: integer
        LOW:
          type: integer
        INFO:
          type: integer
      required:
      - CRITICAL
      - HIGH
      - INFO
      - LOW
      - MEDIUM
    SortOrderEnum:
      enum:
      - asc
      - desc
      type: string
      description: |-
        * `asc` - asc
        * `desc` - desc
    StatusEnum:
      enum:
      - pending
      - in_progress
      - completed
      type: string
      description: |-
        * `pending` - Pending
        * `in_progress` - In Progress
        * `completed` - Completed
    Todo:
      type: object
      description: Todo serializer with user information
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/StatusEnum'
        priority:
          $ref: '#/components/schemas/PriorityEnum'
        user:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        due_date:
          type: string
          format: date-time
          nullable: true
        completed_at:
          type: string
          format: date-time
          nullable: true
      required:
      - created_at
      - id
      - title
      - updated_at
      - user
    TodoCreateUpdate:
      type: object
      description: Todo serializer for create and update operations
      properties:
        title:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/StatusEnum'
        priority:
          $ref: '#/components/schemas/PriorityEnum'
        due_date:
          type: string
          format: date-time
          nullable: true
      required:
      - title
    TodoCreateUpdateRequest:
      type: object
      description: Todo serializer for create and update operations
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/StatusEnum'
        priority:
          $ref: '#/components/schemas/PriorityEnum'
        due_date:
          type: string
          format: date-time
          nullable: true
      required:
      - title
    TodoRequest:
      type: object
      description: Todo serializer with user information
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/StatusEnum'
        priority:
          $ref: '#/components/schemas/PriorityEnum'
        due_date:
          type: string
          format: date-time
          nullable: true
        completed_at:
          type: string
          format: date-time
          nullable: true
      required:
      - title
    TokenObtainPair:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - refresh
    TokenObtainPairRequest:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
          minLength: 1
        password:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - password
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
      required:
      - access
    TokenRefreshRequest:
      type: object
      properties:
        refresh:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - refresh
    User:
      type: object
      description: User serializer for user information
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
      required:
      - id
      - username
    UserRegistrationRequest:
      type: object
      description: User registration serializer
      properties:
        username:
          type: string
          minLength: 1
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        password:
          type: string
          writeOnly: true
          minLength: 8
        password_confirm:
          type: string
          writeOnly: true
          minLength: 1
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
      required:
      - password
      - password_confirm
      - username
    UserRequest:
      type: object
      description: User serializer for user information
      properties:
        username:
          type: string
          minLength: 1
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
      required:
      - username
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
tags:
- name: Authentication
  description: Authentication endpoints (JWT tokens)
- name: Todos
  description: Todo management endpoints
- name: Scanner
  description: Security scanner endpoints
