openapi: 3.0.3
info:
  title: EASM API
  version: 1.0.0
  description: EASM Django REST API
paths:
  /api/:
    get:
      operationId: api_retrieve
      description: Provides information about available API endpoints.
      summary: API Root
      tags:
      - API Info
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  version:
                    type: string
                  endpoints:
                    type: object
          description: ''
  /api/register/:
    post:
      operationId: api_register_create
      description: Create a new user account with username, password, and optional
        profile information.
      summary: Register a new user
      tags:
      - Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
            examples:
              RegistrationExample:
                value:
                  username: newuser
                  email: newuser@example.com
                  password: securepassword123
                  password_confirm: securepassword123
                  first_name: John
                  last_name: Doe
                summary: Registration Example
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRegistration'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRegistration'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User registered successfully
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                      username:
                        type: string
                      email:
                        type: string
                      first_name:
                        type: string
                      last_name:
                        type: string
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: array
                    items:
                      type: string
                  password:
                    type: array
                    items:
                      type: string
                  email:
                    type: array
                    items:
                      type: string
          description: ''
  /api/todos/:
    get:
      operationId: api_todos_list
      description: |-
        ViewSet for Todo CRUD operations

        Provides:
        - list: GET /api/todos/
        - create: POST /api/todos/
        - retrieve: GET /api/todos/{id}/
        - update: PUT /api/todos/{id}/
        - partial_update: PATCH /api/todos/{id}/
        - destroy: DELETE /api/todos/{id}/
        - complete: POST /api/todos/{id}/complete/
        - my_todos: GET /api/todos/my_todos/
        - statistics: GET /api/todos/statistics/
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: priority
        schema:
          type: string
          enum:
          - high
          - low
          - medium
        description: |-
          * `low` - Low
          * `medium` - Medium
          * `high` - High
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: string
          enum:
          - completed
          - in_progress
          - pending
        description: |-
          * `pending` - Pending
          * `in_progress` - In Progress
          * `completed` - Completed
      tags:
      - Todos
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTodoList'
          description: ''
    post:
      operationId: api_todos_create
      description: |-
        ViewSet for Todo CRUD operations

        Provides:
        - list: GET /api/todos/
        - create: POST /api/todos/
        - retrieve: GET /api/todos/{id}/
        - update: PUT /api/todos/{id}/
        - partial_update: PATCH /api/todos/{id}/
        - destroy: DELETE /api/todos/{id}/
        - complete: POST /api/todos/{id}/complete/
        - my_todos: GET /api/todos/my_todos/
        - statistics: GET /api/todos/statistics/
      tags:
      - Todos
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoCreateUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TodoCreateUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TodoCreateUpdate'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoCreateUpdate'
          description: ''
  /api/todos/{id}/:
    get:
      operationId: api_todos_retrieve
      description: |-
        ViewSet for Todo CRUD operations

        Provides:
        - list: GET /api/todos/
        - create: POST /api/todos/
        - retrieve: GET /api/todos/{id}/
        - update: PUT /api/todos/{id}/
        - partial_update: PATCH /api/todos/{id}/
        - destroy: DELETE /api/todos/{id}/
        - complete: POST /api/todos/{id}/complete/
        - my_todos: GET /api/todos/my_todos/
        - statistics: GET /api/todos/statistics/
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Todo.
        required: true
      tags:
      - Todos
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
          description: ''
    put:
      operationId: api_todos_update
      description: |-
        ViewSet for Todo CRUD operations

        Provides:
        - list: GET /api/todos/
        - create: POST /api/todos/
        - retrieve: GET /api/todos/{id}/
        - update: PUT /api/todos/{id}/
        - partial_update: PATCH /api/todos/{id}/
        - destroy: DELETE /api/todos/{id}/
        - complete: POST /api/todos/{id}/complete/
        - my_todos: GET /api/todos/my_todos/
        - statistics: GET /api/todos/statistics/
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Todo.
        required: true
      tags:
      - Todos
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoCreateUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TodoCreateUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TodoCreateUpdate'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoCreateUpdate'
          description: ''
    patch:
      operationId: api_todos_partial_update
      description: |-
        ViewSet for Todo CRUD operations

        Provides:
        - list: GET /api/todos/
        - create: POST /api/todos/
        - retrieve: GET /api/todos/{id}/
        - update: PUT /api/todos/{id}/
        - partial_update: PATCH /api/todos/{id}/
        - destroy: DELETE /api/todos/{id}/
        - complete: POST /api/todos/{id}/complete/
        - my_todos: GET /api/todos/my_todos/
        - statistics: GET /api/todos/statistics/
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Todo.
        required: true
      tags:
      - Todos
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTodoCreateUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTodoCreateUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTodoCreateUpdate'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoCreateUpdate'
          description: ''
    delete:
      operationId: api_todos_destroy
      description: |-
        ViewSet for Todo CRUD operations

        Provides:
        - list: GET /api/todos/
        - create: POST /api/todos/
        - retrieve: GET /api/todos/{id}/
        - update: PUT /api/todos/{id}/
        - partial_update: PATCH /api/todos/{id}/
        - destroy: DELETE /api/todos/{id}/
        - complete: POST /api/todos/{id}/complete/
        - my_todos: GET /api/todos/my_todos/
        - statistics: GET /api/todos/statistics/
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Todo.
        required: true
      tags:
      - Todos
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/todos/{id}/complete/:
    post:
      operationId: api_todos_complete_create
      description: Mark a specific todo as completed and set completion timestamp.
      summary: Mark todo as completed
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Todo.
        required: true
      tags:
      - Todos
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Todo'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Todo'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Todo'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
          description: ''
  /api/todos/my_todos/:
    get:
      operationId: api_todos_my_todos_list
      description: Get all todos for the authenticated user with filtering and pagination.
      summary: Get my todos
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: priority
        schema:
          type: string
          enum:
          - high
          - low
          - medium
        description: |-
          * `low` - Low
          * `medium` - Medium
          * `high` - High
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: string
          enum:
          - completed
          - in_progress
          - pending
        description: |-
          * `pending` - Pending
          * `in_progress` - In Progress
          * `completed` - Completed
      tags:
      - Todos
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTodoList'
          description: ''
  /api/todos/statistics/:
    get:
      operationId: api_todos_statistics_retrieve
      description: Get statistics about the user's todos including completion rates.
      summary: Get todo statistics
      tags:
      - Todos
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  pending:
                    type: integer
                  in_progress:
                    type: integer
                  completed:
                    type: integer
                  completion_rate:
                    type: number
                    format: float
          description: ''
  /api/token/:
    post:
      operationId: api_token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/token/refresh/:
    post:
      operationId: api_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
components:
  schemas:
    PaginatedTodoList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Todo'
    PatchedTodoCreateUpdate:
      type: object
      description: Todo serializer for create and update operations
      properties:
        title:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/StatusEnum'
        priority:
          $ref: '#/components/schemas/PriorityEnum'
        due_date:
          type: string
          format: date-time
          nullable: true
    PriorityEnum:
      enum:
      - low
      - medium
      - high
      type: string
      description: |-
        * `low` - Low
        * `medium` - Medium
        * `high` - High
    StatusEnum:
      enum:
      - pending
      - in_progress
      - completed
      type: string
      description: |-
        * `pending` - Pending
        * `in_progress` - In Progress
        * `completed` - Completed
    Todo:
      type: object
      description: Todo serializer with user information
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/StatusEnum'
        priority:
          $ref: '#/components/schemas/PriorityEnum'
        user:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        due_date:
          type: string
          format: date-time
          nullable: true
        completed_at:
          type: string
          format: date-time
          nullable: true
      required:
      - created_at
      - id
      - title
      - updated_at
      - user
    TodoCreateUpdate:
      type: object
      description: Todo serializer for create and update operations
      properties:
        title:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/StatusEnum'
        priority:
          $ref: '#/components/schemas/PriorityEnum'
        due_date:
          type: string
          format: date-time
          nullable: true
      required:
      - title
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    User:
      type: object
      description: User serializer for user information
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
      required:
      - id
      - username
    UserRegistration:
      type: object
      description: User registration serializer
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        password:
          type: string
          writeOnly: true
          minLength: 8
        password_confirm:
          type: string
          writeOnly: true
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
      required:
      - password
      - password_confirm
      - username
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
